#!/usr/bin/perl -w
# Copyright (C) 2014 Modell Aachen GmbH
#
# For licensing info read LICENSE file in the Foswiki root.
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details, published at 
# http://www.gnu.org/copyleft/gpl.html

use strict;
use warnings;

use Event;
use AnyEvent::Handle;
use AnyEvent::Socket;
use IO::Socket       ();
use JSON;
use Getopt::Long;
use Log::Dispatch;

use constant DEFAULTPORT => 8090;
use constant DEFAULTADDRESS => '127.0.0.1';

# log dispatcher
our $log;
our $dir = $ENV{FOSWIKI_ROOT};
$dir =~ s#/+$##;

# Set library paths in @INC, at compile time
BEGIN {
    $log = Log::Dispatch->new(
        outputs => [
            [ 'Syslog', min_level => 'info', ident => 'MATTWorker'],
        ],
    );
    $log->log(level => 'info', message => "Worker: started.");

    # check FOSWIKI_ROOT settings, change to /bin if possible
    my $dir = $ENV{FOSWIKI_ROOT};
    unless($dir) {
        $log->log(level => 'error', message => "Please set FOSWIKI_ROOT to your Foswiki installation.");
        exit 1;
    }
    unless(chdir("$dir/bin")) {
        $log->log(level => 'error', message => "Directory $dir/bin does not exist.");
        exit 1;
    }


    # foswiki stuff
    if (-e './setlib.cfg') {
        unshift @INC, '.';
    } elsif (-e '../bin/setlib.cfg') {
        unshift @INC, '../bin';
    }
    $Foswiki::cfg{Engine} = 'Foswiki::Engine::CLI';
    $ENV{FOSWIKI_ACTION} = 'mattworker';
    require 'setlib.cfg';
}

# We need Foswiki for VirtualHostingContrib stuff.
use Foswiki ();
use Foswiki::UI ();

our %mattworker_data;


sub _idle {
    my ($hdl, $handlers) = @_;
    $hdl->push_write(
        json => {
            department => $mattworker_data{department},
            type => 'worker_idle',
            cache_fields => ($handlers->{cache_fields} || []),
            core => $dir,
        }
    );
}

sub run {
    # read command line parameters
    my %cfg;
    {
        # redirect warning messages form GetOpt::Long to log file.
        local $SIG{__WARN__} = sub { $log->log(level => 'error', message => "Error in command line arguments: " . $_[0]); exit 1;};
        GetOptions(
            "department=s" => \$cfg{'department'},
            "grinder=s"    => \$cfg{'grinder'},
            "virtualhosts" => \$cfg{'virtualhosts'},
            "d=s"          => \$cfg{'daemon'},
        );
    }
    unless (defined $cfg{'department'} )
    {
        $log->log(level => 'error', message => $cfg{'department'}.": Mandatory argument '--department' ist missing.");
        exit 1;
    }

    # fork if daemon mode
    if ( defined $cfg{'daemon'} ) {
        my $cPID = fork;
        unless ( defined $cPID ) { $log->log( level => 'error', message =>  $cfg{'department'} . ": Can't fork: $!" ); exit 1;};
        if ( $cPID ) { # if parent process
            $log->log( level => 'debug', message => $cfg{'department'} . ": Parent received pid \"$cPID\".");
            my $ok = open( my $fh, ">", $cfg{'daemon'});
            if ( $ok ) { # write PID to file, for initscript to catch
                print $fh $cPID;
                $log->log( level => 'debug', message => $cfg{'department'} . ": Wrote pid to file.");
                close $fh;
            } else {
                $log->log( level => 'error', message => $cfg{'department'} . ": Can not write pid file " . $cfg{'daemon'} . ": $!" );
            }
            exit 0;
        }
    }


    my $exitWorker = AnyEvent->condvar;
    AE::signal INT => sub { $exitWorker->send; };

    my $handlers;
    if ($cfg{grinder}) {
        $handlers = require $cfg{grinder};
    } else {
        eval {
           $handlers = require "Foswiki/Plugins/$cfg{'department'}/Grinder.pm";
        };
        unless ($handlers) {
            $handlers = require "Foswiki/Contrib/$cfg{'department'}/Grinder.pm";
        }
    }
    $mattworker_data{department} = $cfg{'department'};
    $mattworker_data{handlers} = $handlers;

    my @read; @read = (json => sub {
        my ($hdl, $json) = @_;

        my $t = $json->{type};
        my $host = $json->{host};
        local $ENV{HTTP_HOST} = $host if defined $host;
        $mattworker_data{type} = $t;
        $mattworker_data{data} = $json->{data};

        my $run_engine;
        if ( $cfg{'grinder'} ) {
            # run_engine unavailable
        } elsif ( defined $cfg{'virtualhosts'} ) {
            $run_engine = sub {
                require Foswiki::Contrib::VirtualHostingContrib::VirtualHost;
                Foswiki::Contrib::VirtualHostingContrib::VirtualHost->run_on($host, sub { $Foswiki::engine->run(); } );
            };
        } else {
            $run_engine = sub {
                $Foswiki::engine->run(),
            };
        }

        if ($t eq 'exit_worker') {
            $exitWorker->send;
            return;
        } else {
            my $result = $handlers->{handle_message}->($host, $t, $hdl, $run_engine, $json);
            if (exists $result->{caches}) {
                while (my ($k, $v) = each %{$result->{caches}}) {
                    $hdl->push_write(json => {
                        type => 'set_cache',
                        host => $host,
                        data => {key => $k, value => $v},
                        core => $dir,
                    });
                }
            }
            if ($json->{_wait}) {
                my $response = $result->{response} || '(no response supplied)';
                $hdl->push_write(json => {
                    type => 'msg_to_client',
                    cid => $json->{_wait},
                    data => $response,
                    core => $dir,
                });
            }
        }

        _idle($hdl, $handlers);
        $hdl->push_read(@read);
    });
    my $hdl = new AnyEvent::Handle(
        connect => [$Foswiki::cfg{TaskDaemonPlugin}{Address} || DEFAULTADDRESS, $Foswiki::cfg{TaskDaemonPlugin}{Port} || DEFAULTPORT],
        on_connect => sub {
            $log->log(level => 'info', message => $cfg{'department'} . ": Connecting to MATTDaemon.");
            my $hdl = shift;
            _idle($hdl, $handlers);
            $hdl->push_read(@read);
        },
        on_connect_error => sub {
            $log->log(level => 'warning', message => $cfg{'department'} . ": failed to connect to MATTdaemon: $!");
            exit(1);
        },
        on_eof => sub {
            $log->log(level => 'info', message => $cfg{'department'} . ": MATTdaemon closed the connection, exiting.");
            exit(1);
        },
        on_error => sub {
            my ($hdl, $fatal, $message) = @_;
            $log->log(level => 'warning', message => $cfg{'department'} . ": error in connection to MATTdaemon: $message");
            exit(1);
        },
    );
    $log->log(level => 'info', message => $cfg{'department'} . ": Stopping.");
    $exitWorker->recv;
    $hdl->destroy;
}

run();

1;
