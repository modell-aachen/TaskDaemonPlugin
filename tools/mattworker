#!/usr/bin/perl -w
#
# Copyright (C) 2014 Modell Aachen GmbH
#
# For licensing info read LICENSE file in the Foswiki root.
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details, published at 
# http://www.gnu.org/copyleft/gpl.html

use strict;
use warnings;

use Event;
use AnyEvent::Handle;
use AnyEvent::Socket;
use IO::Socket       ();
use JSON;

# Set library paths in @INC, at compile time
BEGIN {
    # check FOSWIKI_ROOT settings, change to /bin if possible
    my $dir = $ENV{FOSWIKI_ROOT};
    unless($dir) {
        print "Please set FOSWIKI_ROOT to your Foswiki installation.\n";
        exit 1;
    }
    unless(chdir("$dir/bin")) {
        print "Could not change into $dir/bin\n";
        exit 1;
    }

    if (-e './setlib.cfg') {
        unshift @INC, '.';
    } elsif (-e '../bin/setlib.cfg') {
        unshift @INC, '../bin';
    }
    $Foswiki::cfg{Engine} = 'Foswiki::Engine::CLI';
    $ENV{FOSWIKI_ACTION} = 'mattworker';
    require 'setlib.cfg';
}


use Foswiki ();
use Foswiki::UI ();
launchWorker();

our %mattworker_data;

sub _idle {
    my ($hdl, $handlers) = @_;
    $hdl->push_write(json => {department => $mattworker_data{department}, type => 'worker_idle', cache_fields => ($handlers->{cache_fields} || []) });
}

sub launchWorker {
    my $exitWorker = AnyEvent->condvar;
    AE::signal INT => sub { $exitWorker->send; };

    my $department = $ENV{MW_DEPARTMENT};
    my $handlers = require "Foswiki/Plugins/${department}/Grinder.pm";
    $mattworker_data{department} = $department;
    $mattworker_data{handlers} = $handlers;

    my @read; @read = (json => sub {
        my ($hdl, $json) = @_;

        my $t = $json->{type};
        my $host = $json->{host};
        local $ENV{HTTP_HOST} = $host if defined $host;
        $mattworker_data{type} = $t;
        $mattworker_data{data} = $json->{data};

        my $run_engine;
        if ($ENV{VIRTUALHOSTS}) {
            $run_engine = sub {
                require Foswiki::Contrib::VirtualHostingContrib::VirtualHost;
                Foswiki::Contrib::VirtualHostingContrib::VirtualHost->run_on($host, sub { $Foswiki::engine->run(); } );
            };
        } else {
            $run_engine = sub {
                $Foswiki::engine->run(),
            };
        }

        if ($t eq 'exit_worker') {
            $exitWorker->send;
            return;
        } else {
            my $response = $handlers->{handle_message}->($host, $t, $hdl, $run_engine, $json);
            if (exists $response->{caches}) {
                while (my ($k, $v) = each %{$response->{caches}}) {
                    $hdl->push_write(json => {
                        type => 'set_cache',
                        host => $host,
                        data => {key => $k, value => $v},
                    });
                }
            }
        }

        _idle($hdl, $handlers);
        $hdl->push_read(@read);
    });
    my $hdl = new AnyEvent::Handle(
        connect => ['127.0.0.1', $Foswiki::cfg{TaskDaemonPlugin}{port} || 8090],
        on_connect => sub {
            my $hdl = shift;
            _idle($hdl, $handlers);
            $hdl->push_read(@read);
        },
        on_connect_error => sub {
            print "Worker: failed to connect to MATT daemon: $!\n";
            exit();
        },
        on_eof => sub {
            print "Worker: MATT daemon closed the connection, exiting.\n";
            exit();
        },
        on_error => sub {
            my ($hdl, $fatal, $message) = @_;
            print "Worker: error in connection to MATT daemon: $message\n";
            exit();
        },
    );
    $exitWorker->recv;
    $hdl->destroy;
}
1;

