#!/usr/bin/perl -w
require 5.004;
use strict;
use warnings;

package MATTDaemon;
use AnyEvent::Handle;
use AnyEvent::Socket;

use constant DEBUG => 0;

my @todos = ();
my $hosts = {};

sub run {
    my $dir = $ENV{FOSWIKI_ROOT};
    my $daemonport = 8090;
    foreach my $param ( @ARGV ) {
        if($param =~ m/^port=(\d+)$/) {
            $daemonport = $1;
        } else {
            print "Unknown parameter: $param";
        }
    }
    unless($dir) {
        print "Please set FOSWIKI_ROOT to your Foswiki installation.\n";
        return;
    }
    unless(chdir("$dir/bin")) {
       print "Could not change into $dir/bin.\n";
       return;
    }
    my $quitMatt = AnyEvent->condvar;
    my %clients;
    my %queues;
    my %waiting_workers;
    my %waiting2dep;

    tcp_server('127.0.0.1', $daemonport, sub {
            my ($fh, $host, $port) = @_;
            my $cid = "$host:$port";
            print "(MATTDaemon:$daemonport) client connected from $cid\n";
            my $buffer;
            my $disconnect = sub {
                print "(MATTDaemon:$daemonport) client at $cid disconnected\n";
                delete $clients{$cid};
                return unless exists $waiting2dep{$cid};
                delete $waiting_workers{$waiting2dep{$cid}}{$cid};
            };
            my $hdl = new AnyEvent::Handle(fh => $fh);
            $hdl->on_read(sub {
                $hdl->push_read(json => sub {
                        my ($hdl, $json) = @_;
                        my $type = $json->{type};
                        my $host = $json->{host} || 'default';

                        unless ($type) {
                            $hdl->push_write(json => {
                                    status => 'error',
                                    msg => 'message was missing type arg'
                            });
                            return;
                        }
                        if ($type eq 'worker_idle') {
                            my $department = $json->{department} || '';
                            my $queue = $queues{$department};
                            if (ref $queue && @$queue) {
                                my $wdata = shift @$queue;
                                $wdata->{cache} = {};
                                my @fields = @{$json->{cache_fields}};
                                @{$wdata->{cache}}{@fields} = @{$hosts->{$host}}{@fields};
                                $hdl->push_write(json => $wdata);
                            } else {
                                $waiting2dep{$cid} = $department;
                                $waiting_workers{$department}{$cid} = {
                                    hdl => $hdl,
                                    cache_fields => $json->{cache_fields},
                                };
                            }
                        } elsif ($type eq 'set_cache') {
                            $hosts->{$host} ||= {};
                            $hosts->{$host}{$json->{data}{key}} = $json->{data}{value};
                        } elsif ($type eq 'clear_cache') {
                            undef $hosts->{$host};
                        } elsif ($type eq 'msg_to_client') {
                            return if !exists $clients{$json->{cid}};
                            $clients{$json->{cid}}->push_write(json => {data => $json->{data}});
                        } elsif ($type eq 'harakiri') {
                            foreach (keys %waiting_workers) {
                                $waiting_workers{$_}{hdl}->push_write(json => {type => 'exit_worker'});
                                $disconnect->($_);
                            }
                        } else {
                            my $department = $json->{department};
                            print "$department - $json->{type}: $json->{data}\n" if DEBUG;
                            my $wait = $json->{_wait};
                            $json->{_wait} = $cid if $wait;
                            if (keys %{$waiting_workers{$department}}) {
                                my ($worker) = keys %{$waiting_workers{$department}};
                                $worker = delete $waiting_workers{$department}{$worker};
                                my $whdl = $worker->{hdl};
                                $json->{cache} = {};
                                my @fields = @{$worker->{cache_fields}};
                                @{$json->{cache}}{@fields} = @{$hosts->{$host}}{@fields};
                                $whdl->push_write(json => $json);
                            } else {
                                $queues{$department} = () unless $queues{$department};
                                push @{$queues{$department}}, $json;
                            }
                            unless ($wait) {
                                $hdl->push_write(json => {status => 'ok', msg => 'queued'});
                            }
                        }
                });
            });
            $clients{$cid} = $hdl;
            $hdl->on_eof($disconnect);
            $hdl->on_error($disconnect);
        });
    $quitMatt->recv;
}

run();

1;
