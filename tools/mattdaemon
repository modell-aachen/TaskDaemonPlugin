#!/usr/bin/perl -w
# Copyright (C) 2014 Modell Aachen GmbH
#
# For licensing info read LICENSE file in the Foswiki root.
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details, published at 
# http://www.gnu.org/copyleft/gpl.html

require 5.004;
use strict;
use warnings;

package MATTDaemon;
use AnyEvent::Handle;
use AnyEvent::Socket;
use Getopt::Long;
use Log::Dispatch;

use constant DEBUG => 0;
use constant DEFAULTPORT => 8090;
use constant DEFAULTADDRESS => '127.0.0.1';

my @todos = ();
my $hosts = {};

my $loglevel="info";
if ( DEBUG ) { $loglevel = "debug"; }

my $log = Log::Dispatch->new(
    outputs => [
        [ 'Syslog', min_level => $loglevel, ident => 'MATTDaemon' ],
    ],
);

sub run {
    # check FOSWIKI_ROOT settings, change to /bin if possible
    my $dir = $ENV{FOSWIKI_ROOT};
    unless($dir) {
        $log->log(level => 'error', message => "Please set FOSWIKI_ROOT to your Foswiki installation.");
        exit 1;
    }
    $dir =~ s#/+$##;
    unless(chdir("$dir/bin")) {
        $log->log(level => 'error', message => "Directory $dir/bin does not exist.");
        exit 1;
    }

    # read command line parameters
    my %cfg =(
        'port' => DEFAULTPORT,
        'server' => DEFAULTADDRESS,
    );
    {
        # redirect warning messages form GetOpt::Long to log file.
        local $SIG{__WARN__} = sub { $log->log(level => 'error', message => "Error in command line arguments: " . $_[0]); exit 1;};
        GetOptions(
            "port=i"   => \$cfg{'port'},
            "server=s" => \$cfg{'server'},
            "d=s"      => \$cfg{'daemon'},
        );
    }

    # fork if daemon mode
    if ( defined $cfg{'daemon'} ) {
        $log->log( level => 'debug', message => "Run in daemon mode with pidfile \"" . $cfg{'daemon'} . "\".");
        my $cPID = fork;
        unless ( defined $cPID ) { $log->log( level => 'error', message =>  "Can't fork: $!" ); exit 1;};
        if ( $cPID ) { # if parent process
            $log->log( level => 'debug', message => "Parent received pid \"$cPID\".");
            my $ok = open( my $fh, ">", $cfg{'daemon'});
            if ( $ok ) { # write PID to file, for initscript to catch
                print $fh $cPID;
                $log->log( level => 'debug', message => "Wrote pid to file.");
                close $fh;
            } else {
                $log->log( level => 'error', message => "Can not write pid file " . $cfg{'daemon'} . ": $!" );
            }
            exit 0;
        }
    }


    my $quitMatt = AnyEvent->condvar;
    my %clients;
    my %queues;
    my %waiting_workers;
    my %waiting2dep;

    tcp_server($cfg{'server'}, $cfg{'port'}, sub {
            my ($fh, $host, $port) = @_;
            my $cid = "$host:$port"; # get info for connected client
            $log->log(level => 'debug', message => "$$:$cfg{'port'}: client connected from $cid\n");
            my $buffer;
            my $disconnect = sub {
                $log->log(level => 'debug', message => "$$:$cfg{'port'} client at $cid disconnected\n");
                delete $clients{$cid};
                return unless exists $waiting2dep{$cid};
                delete $waiting_workers{$waiting2dep{$cid}}{$cid};
            };
            my $hdl = new AnyEvent::Handle(fh => $fh);
            $hdl->on_read(sub {
                $hdl->push_read(json => sub {
                        my ($hdl, $json) = @_;
                        my $type = $json->{type};
                        my $host = $json->{host} || 'default';

                        unless ($type) {
                            $hdl->push_write(json => {
                                    status => 'error',
                                    msg => 'message was missing type arg'
                            });
                            return;
                        }
                        if ($type eq 'worker_idle') {
                            my $department = $json->{department} || '';+
                            my $core = $json->{core};
                            unless ($core) {
                                $log->log(level => 'error', message => "No core set, please update your workers ($department)\n");
                                $hdl->push_write(json => {status => 'error', msg => 'No core set, worker is useless.'});
                                return;
                            }
                            my $queueName = "$department\@$core";
                            my $queue = $queues{$queueName};
                            if (ref $queue && @$queue) {
                                my $wdata = shift @$queue;
                                $wdata->{cache} = {};
                                my @fields = @{$json->{cache_fields}};
                                @{$wdata->{cache}}{@fields} = @{$hosts->{$host}}{@fields};
                                $hdl->push_write(json => $wdata);
                            } else {
                                $waiting2dep{$cid} = $queueName;
                                $waiting_workers{$queueName}{$cid} = {
                                    hdl => $hdl,
                                    cache_fields => $json->{cache_fields},
                                };
                            }
                        } elsif ($type eq 'set_cache') {
                            $hosts->{$host} ||= {};
                            $hosts->{$host}{$json->{data}{key}} = $json->{data}{value};
                        } elsif ($type eq 'clear_cache') {
                            undef $hosts->{$host};
                        } elsif ($type eq 'msg_to_client') {
                            return if !exists $clients{$json->{cid}};
                            $clients{$json->{cid}}->push_write(json => {data => $json->{data}});
                        } elsif ($type eq 'harakiri') {
                            foreach my $eachDepartment (keys %waiting_workers) {
                                foreach (keys %{$waiting_workers{$eachDepartment}}) {
                                    $waiting_workers{$eachDepartment}{$_}{hdl}->push_write(json => {type => 'exit_worker'});
                                    $cid = $_;
                                    $disconnect->();
                                }
                            }
                            $quitMatt->send;
                        } else {
                            my $department = $json->{department};
                            my $core = $json->{core};
                            unless ($core) {
                                $log->log(level => 'error', message => "No core set, please update your workers ($department)\n");
                                $hdl->push_write(json => {status => 'error', msg => 'No core set, message discarded.'});
                                return;
                            }

                            my $queueName = "$department\@$core";
                            $log->log(level => 'debug', message => "$queueName - $json->{type}: $json->{data}\n");
                            my $wait = $json->{_wait};
                            $json->{_wait} = $cid if $wait;
                            if (keys %{$waiting_workers{$queueName}}) {
                                my ($worker) = keys %{$waiting_workers{$queueName}};
                                $worker = delete $waiting_workers{$queueName}{$worker};
                                my $whdl = $worker->{hdl};
                                $json->{cache} = {};
                                my @fields = @{$worker->{cache_fields}};
                                @{$json->{cache}}{@fields} = @{$hosts->{$host}}{@fields};
                                $whdl->push_write(json => $json);
                            } else {
                                $queues{$queueName} = [] unless $queues{$queueName};
                                push @{$queues{$queueName}}, $json;
                            }
                            unless ($wait) {
                                $hdl->push_write(json => {status => 'ok', msg => 'queued'});
                            }
                        }
                });
            });
            $clients{$cid} = $hdl;
            $hdl->on_eof($disconnect);
            $hdl->on_error($disconnect);
        });
    $quitMatt->recv;
}

run();

1;
